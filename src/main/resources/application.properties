spring.application.name=order-service

server.port=8082

spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=Dostoevsky2324
#using flyway for migration
spring.jpa.hibernate.ddl-auto=none

inventory.service.url=http://localhost:8083

#generate docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

#Actuator endpoints
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilience4j properties / override config.default / config individual instance of cb
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls=5

# Retry
resilience4j.retry.instances.inventory.max-attempts=2
resilience4j.retry.instances.inventory.wait-duration=3s

# TimeLimiter
resilience4j.timelimiter.instances.inventory.timeoutDuration=5s

# Kafka properties
#->connect to local broker
#->send messages to order-notification by default
#->serializes -> <keys as strings, values as Avro>
spring.kafka.bootstrap.servers=localhost:9092
spring.kafka.template.default.topic=order-notification
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.properties.schema.registry.url=http://127.0.0.1:8085

#loki url
loki.url=http://localhost:3100/loki/api/v1/push

#->gather the metrics in the form of a histogram and send it to prometheus
#->tag metrics with app name
#->micrometer tracing by default sends 10% of traces to Tempo -> set to 100%
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=product-service
management.tracing.sampling.probability=1.0